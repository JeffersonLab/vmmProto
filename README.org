VMM Prototype Library

* How to use
  
** compilation
- build the library
#+begin_src shell
  make
#+end_src
- to install it to a specific PATH (example shown):
#+begin_src shell
  make INSTALL_LIB=${HOME}/Linux-x86_64/lib INSTALL_INC=${HOME}/include
#+end_src
  
** test program
- In the test directory, there's a program to show the status of a VMM Prototype at a specific IP address and port
- compile with
  #+begin_src shell
    cd test
    make
  #+end_src
- execute
  #+begin_src shell
    ./vmmPrototypeStatus <ip address> <register port>
  #+end_src

** FPGAIO library usage

*** Initialization
- Open the register access to the FPGA, provided it's IP address, register and event port
  #+begin_src C
    int32_t fpga_id = fpga_init("192.168.1.2", 6102, 6103);
  #+end_src
- Return value ~fpga_id~ is the index of initialized fpga.  The first will return ~0~ if successful.  An error condition will return ~-1~.

*** Read and Write to FPGA registers

- three routines provide read and write access to the FPGA registers, provided their initialized fpga_id.
#+begin_src C
  int32_t fpga_write32(int32_t id, void *addr, int val);
  uint32_t fpga_read32(int32_t id, void *addr);
  int32_t fpga_read32_n(int32_t id, int32_t n, void *addr, uint32_t *buf)    
#+end_src

**** example
- Read the =boardID= from an FPGA at ~192.168.1.3~
#+begin_src C
  int32_t fpga_id = fpga_init("192.168.1.2", 6102, 6103);

  uint32_t boardID;
  if(fpga_id > -1)
    {
      boardID = fpga_read32(fpga_id, &pFPGA_regs->Clk.BoardId);
    }
#+end_src  


*** Open / Close / and Read from FPGA Event Socket
- open the event port socket
#+begin_src C
  int32_t rval = open_event_socket(fpga_id);
#+end_src  

- read from event socket up to ~nwords_max~ into specified buffer
#+begin_src C
  int32_t nwords_max = 32;
  uint32_t buffer[32];
  nwords_read = read_event_socket(fpga_id, (uint32_t *)buffer, nwords_max)
#+end_src  
- close the event port socket
#+begin_src C
  int32_t rval = close_event_socket(fpga_id);
#+end_src  

*** Close the register access socket
- close the socket before exiting the program
#+begin_src C
  int32_t rval = close_register_socket(fpga_id);
#+end_src
